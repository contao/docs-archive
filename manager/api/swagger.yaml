openapi: 3.0.0
info:
  title: Contao Manager API
  version: "1.1.0"

paths:

  ###############
  #   Session   #
  ###############

  /api/session:
    post:
      summary: Create a new session (login)
      description: If no users are defined, this will create an initial user with the given credentials.
      tags: [Session]
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        200:
          description: Successful login
          headers:
            Cookie:
              description: On successful login the server will set the authentication cookies.
              schema:
                type: object
                properties:
                  contao_manager_auth:
                    description: Authentication token as HTTP-only cookie.
                    type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        401:
          description: If the authentication was not successful.

    get:
      summary: Get current session status
      description: Returns information about the current session (based on authentication cookie)
      tags: [Session]
      responses:
        200:
          description: If the user is authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        204:
          description: If there are no records in the user database
        401:
          description: If the user is not authenticated

    delete:
      summary: Delete the current session (logout)
      tags: [Session]
      responses:
        204:
          description: On successful logout.
        401:
          description: If there is no active session.


  #############
  #   Files   #
  #############

  /api/files/{file}:
    parameters:
      - name: file
        in: path
        description: The filename to handle.
        required: true
        schema:
          type: string
          enum:
            - composer.json
            - composer.lock
    get:
      summary: Gets the content of a file.
      tags: [Files]
      responses:
        200:
          description: Content of the files.
          content:
            text/plain:
              schema:
                type: string
        403:
          description: If the file parameter is invalid.
    put:
      summary: Writes content of a file
      tags: [Files]
      responses:
        200:
          description: Content of the file
          content:
            text/plain:
              schema:
                type: string
        403:
          description: If the file parameter is invalid.


  ##############
  #   System   #
  ##############

  /api/server/self-update:
    get:
      summary: Gets update status of the Contao Manager
      tags: [Server Configuration]
      responses:
        200:
          description: The update status.
          content:
            application/json:
              schema:
                type: object
                properties:
                  current_version:
                    type: string
                    description: Current version of the Contao Manager.
                  latest_version:
                    type: string
                    description: Latest available version of the Contao Manager.

        501:
          description: If version is a development build that cannot be updated.

  /api/server/config:
    get:
      summary: Gets server configuration
      tags: [Server Configuration]
      responses:
        200:
          description: The configured server configuration if available, otherwise the detected values.
          content:
            application/json:
              schema:
                type: object
                properties:
                  server:
                    type: string
                    description: Name of the server configuration.
                  php_cli:
                    type: string
                    description: Path to the PHP command line if the server configuration is "custom".
                  detected:
                    type: boolean
                  configs:
                    type: array
                    description: List of known server configurations.
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        website:
                          type: string
                        php:
                          type: object
                          description: Object key is the binary path, values is array of command line arguments
                          example:
                            { path/to/php-binary: ['-d', 'memory_limit=-1'] }
    put:
      summary: Sets server configuration
      tags: [Server Configuration]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                server:
                  type: string
                  description: Name of the server configuration.
                php_cli:
                  type: string
                  description: Path to the PHP command line if the server configuration is "custom".

      responses:
        200:
          description: If the config was successfully saved. Contains same model as GET.
        400:
          description: On field validation errors
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ValidationProblem'

  /api/server/php-web:
    get:
      summary: Gets PHP web server configuration
      tags: [Server Configuration]
      responses:
        200:
          description: Version of the current PHP web server. The problem key returns the first found server issue or empty if none.
          content:
            application/json:
              schema:
                properties:
                  version:
                    type: string
                    description: PHP version
                  version_id:
                    type: integer
                    description: PHP version ID
                  platform:
                    type: string
                    enum:
                      - unix
                      - windows
                  problem:
                    $ref: '#/components/schemas/ApiProblem'

  /api/server/php-cli:
    get:
      summary: Gets PHP command line configuration
      tags: [Server Configuration]
      responses:
        200:
          description: Version of the current PHP command line binary. The problem key returns the first found server issue or empty if none.
          content:
            application/json:
              schema:
                properties:
                  version:
                    type: string
                  version_id:
                    type: integer
                    description: PHP version ID
                  problem:
                    $ref: '#/components/schemas/ApiProblem'
        503:
          description: If the server config is not ready or the command line binary cannot be found.

  /api/server/phpinfo:
    get:
      summary: Gets PHP Information
      tags: [Server Configuration]
      responses:
        200:
          description: Gets result of the phpinfo() function.

  /api/server/opcode:
    get:
      summary: Gets PHP opcode cache Information
      tags: [Server Configuration]
      responses:
        200:
          description: Status of the opcode cache.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Opcache'
    delete:
      summary: Resets the opcode cache
      tags: [Server Configuration]
      responses:
        200:
          description: Status of the opcode cache.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Opcache'

  /api/server/composer:
    get:
      summary: Gets Composer configuration
      tags: [Server Configuration]
      responses:
        200:
          description: Returns information about the composer configuration.
          content:
            application/json:
              schema:
                properties:
                  json:
                    type: object
                    properties:
                      found:
                        type: boolean
                      valid:
                        type: boolean
                      error:
                        type: object
                        properties:
                          message:
                            type: string
                          details:
                            type: string
                  lock:
                    type: object
                    properties:
                      found:
                        type: boolean
                      fresh:
                        type: boolean
                  vendor:
                    type: object
                    properties:
                      found:
                        type: boolean
        503:
          description: If the server config is not ready or the command line binary cannot be found.

  /api/server/contao:
    get:
      summary: Contao configuration
      tags: [Server Configuration]
      responses:
        200:
          description: Gets information about the current Contao installation.
          content:
            application/json:
              schema:
                properties:
                  version:
                    description: The Contao version number.
                    type: string
                  api:
                    description: The Contao API version number.
                    type: integer
        500:
          description: If any of the commands did not run successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiProblem'
        503:
          description: If the server config is not ready or the command line binary cannot be found.



  #############
  #   Users   #
  #############

  /api/users:
    get:
      summary: User List
      tags: [Users]
      responses:
        200:
          description: An array of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
    post:
      summary: Create User
      tags: [Users]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        200:
          description: Data of the newly created user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

  /api/users/{username}:
    get:
      summary: Get User
      tags: [Users]
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: The user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        404:
          description: User was not found.

    put:
      summary: Update User
      tags: [Users]
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

    delete:
      summary: Delete User
      tags: [Users]
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: User deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

  /api/users/{username}/tokens:
    get:
      summary: Token List
      tags: [Users]
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: An array of tokens.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenResponse'
    post:
      summary: Create Token
      tags: [Users]
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
      responses:
        200:
          description: Data of the newly created token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'

  /api/users/{username}/tokens/{token}:
    get:
      summary: Get Token
      tags: [Users]
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: The token data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        404:
          description: Token was not found.

    delete:
      summary: Delete Token
      tags: [Users]
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Token deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'


  #####################
  #   Configuration   #
  #####################

  /api/config/manager:
    get:
      summary: Get manager config.
      tags: [Configuration]
      responses:
        200:
          description: The manager configuration.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ManagerConfig'
    put:
      summary: Replace manager config.
      tags: [Configuration]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagerConfig'
      responses:
        200:
          description: The manager configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagerConfig'
    patch:
      summary: Append manager config.
      tags: [Configuration]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagerConfig'
      responses:
        200:
          description: The manager configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagerConfig'

  /api/config/auth:
    get:
      summary: Get Composer auth config.
      tags: [Configuration]
      responses:
        200:
          description: The Composer auth configuration.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthConfig'
    put:
      summary: Replace Composer auth config.
      tags: [Configuration]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthConfig'
      responses:
        200:
          description: The Composer auth configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthConfig'
    patch:
      summary: Append Composer auth config.
      tags: [Configuration]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthConfig'
      responses:
        200:
          description: The Composer auth configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthConfig'

  /api/config/auth/github-oauth:
    put:
      summary: Set GitHub OAuth token.
      tags: [Configuration]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string

      responses:
        200:
          description: The Composer auth configuration.
          content:
            application/json:
              schema:
                type: object
                properties:
                  github.com:
                    type: string
                    description: OAuth token for github.com.

  /api/config/composer:
    get:
      summary: Get Composer config.
      tags: [Configuration]
      responses:
        200:
          description: The Composer configuration.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComposerConfig'
    put:
      summary: Replace Composer config.
      tags: [Configuration]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComposerConfig'
      responses:
        200:
          description: The Composer configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComposerConfig'
    patch:
      summary: Append Composer config.
      tags: [Configuration]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComposerConfig'
      responses:
        200:
          description: The Composer configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComposerConfig'


  ##################
  #   Contao API   #
  ##################

  /api/contao/access-key:
    get:
      summary: Gets the hashed access key.
      tags: [Contao API]
      responses:
        200:
          description: The Contao access key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetContaoAccessKey'
        501:
          description: If the current Contao version does not support the access-key API.
    put:
      summary: Sets the hashed access key.
      tags: [Contao API]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetContaoAccessKey'
      responses:
        200:
          description: The access key was set.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetContaoAccessKey'
        501:
          description: If the current Contao version does not support the access-key API.
    delete:
      summary: Removes the access key.
      tags: [Contao API]
      responses:
        200:
          description: The access key was removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetContaoAccessKey'
        501:
          description: If the current Contao version does not support the access-key API.


  #############
  #   Tasks   #
  #############

  /api/task:
    get:
      summary: Gets task data.
      tags: [Tasks]
      responses:
        200:
          description: The current task data.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        204:
          description: If no task is active.
    put:
      summary: Sets task data.
      tags: [Tasks]
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          description: The current task data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        400:
          description: If a task is already running or the payload is invalid

    patch:
      summary: Starts or stops the active task.
      tags: [Tasks]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskStatus'
      responses:
        200:
          description: If the status was successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        400:
          description: If the task status is unknown.

    delete:
      summary: Deletes task data.
      tags: [Tasks]
      responses:
        200:
          description: The deleted task data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        400:
          description: If the task cannot be deleted because it's running.


  ################
  #   Packages   #
  ################

  /api/packages/root:
    get:
      summary: Gets details of the root Composer package.
      tags: [Packages]
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Package'

  /api/packages/local/:
    get:
      summary: Gets list of installed Composer packages.
      tags: [Packages]
      responses:
        200:
          description: Collection of installed packages. Object key equals package name, the root package is added with key "root".
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/Package'

  /api/packages/local/{name}:
    get:
      summary: Gets details of an installed Composer package.
      tags: [Packages]
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Package'

  /api/constraint:
    post:
      summary: Validates a Composer version constraint
      tags: [Packages]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                constraint:
                  type: string
                  description: The version constraint to validate.
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConstraintValidation'
        400:
          description: If no constraint is given.

components:
  schemas:
    UserRequest:
      type: object
      required: ["username"]
      properties:
        username:
          type: string
          description: Username of the user.
        password:
          type: string
          format: password
          description: Password of the user.

    UserResponse:
      type: object
      properties:
        username:
          type: string
          description: Username of the user object.

    TokenRequest:
      type: object
      properties:
        client_id:
          type: string
          description: OAuth client ID of the token.

    TokenResponse:
      type: object
      properties:
        client_id:
          type: string
          description: OAuth client ID of the token.
        username:
          type: string
          description: Username of the token.
        token:
          type: string

    ManagerConfig:
      type: object
      properties:
        server:
          type: string
        php_cli:
          type: string
          description: Path to the PHP executable.

    AuthConfig:
      type: object
      properties:
        github-oauth:
          type: object

    ComposerConfig:
      type: object

    Opcache:
      type: object
      properties:
        opcache_enabled:
          type: boolean
        cache_full:
          type: boolean
        restart_pending:
          type: boolean
        restart_in_progress:
          type: boolean
        memory_usage:
          type: object
        interned_strings_usage:
          type: object
        opcache_statistics:
          type: object

    GetContaoAccessKey:
      type: object
      properties:
        access-key:
          type: string

    SetContaoAccessKey:
      type: object
      properties:
        user:
          type: string
        password:
          type: string

    Task:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
        type:
          type: string
        created_at:
          type: string
          format: date-time
        output:
          type: string

    TaskStatus:
      type: object
      required: ["status"]
      properties:
        status:
          type: string
          enum:
            - RUNNING
            - STOPPED

    Package:
      type: object
      description: "A package definition according to the Composer schema: https://getcomposer.org/doc/04-schema.md"
      properties:
        name:
          type: string
        version:
          type: string
          description: Currently installed version
        type:
          type: string
          description: A Composer package type
          enum:
            - contao-bundle
            - contao-module
            - library
        time:
          type: string
        description:
          type: string
        license:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
        authors:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              email:
                type: string
              homepage:
                type: string
        require:
          type: object
          description: List of dependent packages.
          additionalProperties:
            type: string
            description: A Composer constraint.
        extra:
          type: object
          properties:
            contao-manager-plugin:
              oneOf:
                - type: string
                  description: Class name if this package has a Manager Plugin.
                - type: array
                  description: Array of class names if this package has multiple Manager Plugins.
                  items:
                    type: string
        abandoned:
          type: boolean

    ConstraintValidation:
      type: object
      properties:
        valid:
          type: boolean
        error:
          type: string

    ApiProblem:
      type: object
      properties:
        title:
          type: string
        type:
          type: string
        status:
          type: integer
        detail:
          type: string

    ValidationProblem:
      type: object
      properties:
        title:
          type: string
        type:
          type: string
        status:
          type: integer
        validation:
          type: array
          items:
            type: object
            properties:
              source:
                type: string
              message:
                type: string

  responses:
    ApiProblem:
      description: Unknown problem in the API
      $ref: '#/components/schemas/ApiProblem'

  securitySchemes:
    AuthCookie:
      type: apiKey
      description: Authentication cookie called "contao_manager_auth". The cookie is set by the server as HTTP-only after successful login.
      name: contao_manager_auth
      in: cookie
    AuthToken:
      type: apiKey
      description: Authentication with a user token.
      name: Contao-Manager-Auth
      in: header

security:
  - { AuthCookie: [] }
  - { AuthToken: [] }
